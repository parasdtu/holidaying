{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","restaurant","id","company","name","class","catchPhrase","CardList","restaurants","map","key","SearchBox","placeholder","handleChange","input","onChange","App","state","searchfield","fetch","then","response","json","users","setState","this","filteredRestaurants","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAGaA,G,kBAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,aAAaC,IAAG,+BAA0BH,EAAMI,WAAWC,GAAG,IAA9C,eACrB,gCAAML,EAAMI,WAAWE,QAAQC,KAA/B,KACA,uCAE0B,GAApBP,EAAMI,WAAWC,GAAO,EAAG,IAAI,EAAI,6BAAK,0BAAMG,MAAM,uBACtD,0BAAMA,MAAM,uBACZ,0BAAMA,MAAM,uBACZ,0BAAMA,MAAM,uBACZ,0BAAMA,MAAM,gBAGZ,6BACCR,EAAMI,WAAWC,GAAG,IAAI,EAAI,iCAAM,0BAAMG,MAAM,uBAC/C,0BAAMA,MAAM,uBACZ,0BAAMA,MAAM,uBACZ,0BAAMA,MAAM,gBACZ,0BAAMA,MAAM,iBAA8B,6BAAK,0BAAMA,MAAM,uBAC3D,0BAAMA,MAAM,uBACZ,0BAAMA,MAAM,gBACZ,0BAAMA,MAAM,gBACZ,0BAAMA,MAAM,gBAJ8B,MAS9C,+BAAKR,EAAMI,WAAWE,QAAQG,YAA9B,eC1BKC,EAAW,SAAAV,GAAK,OACxB,yBAAKC,UAAU,aACfD,EAAMW,YAAYC,KAAI,SAAAR,GAAU,OAE7B,kBAAC,EAAD,CAAMS,IAAKT,EAAWC,GAAID,WAAYA,SCJjCU,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,2BAEIf,UAAU,SACVgB,MAAM,SACNF,YAAaA,EACbG,SAAUF,MCmCHG,E,kDAvCb,aAAc,IAAD,8BACX,gBAEKC,MAAM,CACTT,YAAa,GACbU,YAAa,IALJ,E,gEASO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,YAAae,S,+BAGnC,IAAD,SAC0BE,KAAKR,MAA/BT,EADA,EACAA,YAAYU,EADZ,EACYA,YACbQ,EAAoBlB,EAAYmB,QAAO,SAAA1B,GAAU,OACrDA,EAAWE,QAAQC,KAAKwB,cAAcC,SAASX,EAAYU,kBAI7D,OACE,yBAAK9B,UAAU,OACb,yCACA,kBAAC,EAAD,CAEEc,YAAY,qBACZC,aAAc,SAAAiB,GAAC,OAAG,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAGzD,kBAAC,EAAD,CAAUxB,YAAakB,S,GAhCbO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b1113f94.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n    <img alt=\"restaurant\" src={`https://robohash.org/${props.restaurant.id%100}?set=set4`} />\r\n        <h2> {props.restaurant.company.name} </h2>\r\n        <p> Rating </p>\r\n        {   \r\n            ((props.restaurant.id*69)%5)%2===0 ? <div><span class=\"fa fa-star checked\"></span>\r\n            <span class=\"fa fa-star checked\"></span>\r\n            <span class=\"fa fa-star checked\"></span>\r\n            <span class=\"fa fa-star checked\"></span>\r\n            <span class=\"fa fa-star\"></span>\r\n            </div> \r\n            : \r\n            <div>\r\n            {props.restaurant.id%3===0 ? <div> <span class=\"fa fa-star checked\"></span>\r\n            <span class=\"fa fa-star checked\"></span>\r\n            <span class=\"fa fa-star checked\"></span>\r\n            <span class=\"fa fa-star \"></span>\r\n            <span class=\"fa fa-star \"></span></div> : <div><span class=\"fa fa-star checked\"></span>\r\n            <span class=\"fa fa-star checked\"></span>\r\n            <span class=\"fa fa-star \"></span>\r\n            <span class=\"fa fa-star \"></span>\r\n            <span class=\"fa fa-star \"></span> </div>}\r\n            \r\n            </div>\r\n            \r\n        }\r\n        <p> {props.restaurant.company.catchPhrase} taste! </p>\r\n    </div>\r\n);\r\n ","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n     <div className='card-list'> \r\n    {props.restaurants.map(restaurant => (\r\n\r\n        <Card key={restaurant.id} restaurant={restaurant} />\r\n\r\n        ))} \r\n        \r\n        </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange})  => (\r\n\r\n    <input \r\n\r\n        className='search'\r\n        input='seacrh'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n\r\n    />    \r\n\r\n\r\n);  ","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\n\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super();\r\n\r\n    this.state={\r\n      restaurants: [],\r\n      searchfield: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({restaurants: users}));\r\n  }\r\n  \r\n  render() {\r\n    const {restaurants,searchfield }=this.state;\r\n    const filteredRestaurants=restaurants.filter(restaurant =>\r\n      restaurant.company.name.toLowerCase().includes(searchfield.toLowerCase())\r\n      );\r\n\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>CatZoMato</h1>\r\n        <SearchBox \r\n\r\n          placeholder='Seacrh Restaurants'\r\n          handleChange={e =>this.setState({searchfield: e.target.value})}\r\n\r\n        />\r\n        <CardList restaurants={filteredRestaurants} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}